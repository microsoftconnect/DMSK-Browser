<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Use Cases" data-mc-conditions="Danube.Browser">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>
			Events
		</title>
        <link href="../Resources/Stylesheets/DocLoc.css" rel="stylesheet" type="text/css" />
        <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body>
        <h1><a name="kanchor34"></a>Events</h1>
        <p>Your app can be notified about various events that happen during speech recognition.</p>
        <h2><a name="Session_events"></a>Session events</h2>
        <p>Your app can be notified whenever recording is started or stopped during a session, or when microphone buttons are pressed:</p>
        <p class="compact2"><code>function NUSA_onRecordingStarted() { }</code> &#160;</p>
        <p class="compact2"><code>function NUSA_onRecordingStopped() { }</code>
        </p>
        <p class="indent2"><code>function NUSA_onControlDeviceEventReceived(eventButtonId) { }</code>
        </p>
        <p>There are predefined JavaScript functions you can overwrite to handle the events.</p>
        <p>The <code>NUSA_onRecordingStarted()</code> and <code>NUSA_onRecordingStopped()</code> callbacks notify your app of changes in the recording state, which can be triggered by the user, a call to the <code>NUSA_stopRecording()</code> function, an error, an idle timeout or any other cause, and enable you to update your internal representation of the recording state.</p>
        <p>The <code>NUSA_onControlDeviceEventReceived()</code> callback notifies your app if a microphone button is pressed by the user. Your app can then trigger actions such as opening or closing a report. For more information, see: <a href="DANUBE_MIC_BUTTONS_BROWSER.htm">Microphone button handling</a>.</p>
        <h2><a name="VuiContr"></a>VuiController events</h2>
        <h3>VuiForm events</h3>
        <p>Your app can be notified about events related to individual VuiForms:</p>
        <p class="compact2"><code>function NUSA_onProcessingStarted() { }</code> </p>
        <p class="indent2"><code>function NUSA_onProcessingFinished() { }</code> </p>
        <ul>
            <li>These events are always fired in pairs; for example, for every <code>NUSA_onProcessingStarted()</code> call there is always a corresponding <code>NUSA_onProcessingFinished()</code> call.</li>
            <li>If your app is notified about VuiController events you can (among other tasks) change the GUI based on whether the speech recognition process is ongoing or has finished, either globally or for a specific control.</li>
            <li>Globally: For example, you want to stop the user navigating away from the current speech-enabled page while speech recognition processing is ongoing (to make sure that no recognition results are lost). In this case, the <code>NUSA_onProcessingStarted()</code> and the <code>NUSA_onProcessingFinished()</code> callbacks can be used to disable and enable navigation between forms.</li>
            <li>Specific control: For example, the GUI layout of your app changes based on whether the sound is recorded into a specific control. In this case, wait to change the GUI until all the utterances recorded into that control are completely recognized. By performing the GUI change from the <code>NUSA_onProcessingFinished()</code> callback, you can make sure that all the relevant recognition results are displayed.</li>
            <li>The <code>NUSA_onProcessingStarted()</code> and <code>NUSA_onProcessingFinished()</code> events (global and text control-specific) are reliable only if recording has already been stopped; the user might start speaking again after the <code>NUSA_onProcessingFinished</code> event is fired.</li>
            <li><code>NUSA_onProcessingStarted()</code> and <code>NUSA_onProcessingFinished()</code> events are always fired in pairs: When recording starts (with no recognition results pending from previous recording) and when all recognition results have been processed.</li>
            <li>The <code>NUSA_onProcessingStarted()</code> and <code>NUSA_onProcessingFinished()</code> callbacks can't detect which controls received recognition results.</li>
        </ul>
        <p>The <code>NUSA_onCommandRecognized(cmdId, spokenPhrase, content, placeholderIds, placeholderValues) { }</code> event is called when an application command has been recognized. The following information is delivered by the event about the recognized voice command:</p>
        <p class="compact2"><code>id</code> - the identifier of the recognized command.</p>
        <p class="compact2"><code>spokenPhrase</code> - the actual phrase that was recognized.</p>
        <p class="compact2"><code>content</code> â€“ deprecated, this parameter is always empty.</p>
        <p class="indent2"><code>placeholderIds</code> and <code>placeholderValues</code> - the placeholder identifiers and value pairs that are present in the recognized voice command.</p>
        <p class="indent2"> For more information, see the <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm">application commands concept</a> and the <a href="DANUBE_APPLICATION_COMMANDS_BROWSER.htm">application commands use case</a>.</p>
        <h3>Text control events</h3>
        <p>Your app can be notified about events related to individual text controls (within a VuiForm):</p>
        <p class="compact2"><code>function NUSA_onProcessingStartedForElement(element)</code> </p>
        <p class="indent2"><code>function NUSA_onProcessingFinishedForElement(element)</code>
        </p>
        <ul>
            <li>These events are always fired in pairs; for example, for every <code>NUSA_onProcessingStartedForElement(element)</code> call there is always a corresponding <code>NUSA_onProcessingFinishedForElement(element)</code> call.</li>
            <li>The <code>NUSA_onProcessingStartedForElement(element)</code> and <code>NUSA_onProcessingFinishedForElement(element)</code> events track which controls receive the recognition results.</li>
        </ul>
        <h3>Scenario</h3>
        <ul>
            <li>There are two controls in the form: Field 1 and Field 2. Field 1 has the speech focus when recording is started.</li>
            <li>The user records three utterances without waiting for the results: <span class="command">this is a test</span>, <span class="command">next field</span> and <span class="command">this is another test</span>. Then recording is stopped.</li>
            <li>When all speech recognition processing is finished, Field 1 contains "This is a test", Field 2 contains "This is another test" and Field 2 has the speech focus.</li>
        </ul>
        <p>How the events function:</p>
        <ol>
            <li value="1">Field 1 has the speech focus and the user says <span class="command">this is a test</span>: <code>NUSA_onProcessingStarted()</code> and <code>NUSA_onProcessingStartedForElement(field1)</code> events are fired.</li>
            <li value="2">Field 1 has the speech focus and the user says <span class="command">next field</span> and <span class="command">this is another test</span>: Speech recognition processing is ongoing, therefore no finished events are fired.</li>
            <li value="3">Field 2 has the speech focus, the <code>NUSA_onProcessingStartedForElement(field2)</code> event is fired.</li>
            <li value="4">"this is a test" is written in Field 1 and speech recognition processing is finished for the control, the <code>NUSA_onProcessingFinishedForElement(field1)</code> event is fired.</li>
            <li value="5">
                <p>"this is another test" is written in Field 2 and speech recognition processing is finished for the control, the <code>NUSA_onProcessingFinishedForElement(field2)</code> event is fired. </p>
            </li>
            <li value="6">Speech recognition processing is finished for the VuiForm, the <code>NUSA_onProcessingFinished()</code> event is fired. </li>
        </ol>
        <h3>See also</h3>
        <p class="indent2"><a href="DANUBE_DYNAMIC_GUI_BROWSER.htm">Dynamically modified controls</a>
        </p>
    </body>
</html>